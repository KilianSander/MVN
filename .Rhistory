library(MVN)
?MVN::mvn
citation(MVN)
options(repos = c(CRAN = 'http://cran.rstudio.com'))
db = available.packages()
db
pkgs = rownames(db)
deps = tools::package_dependencies(pkgs, db, which = 'all', reverse = TRUE)
len  = sapply(deps, length)
tail(sort(len), 10)  # the top 10
len
tools::package_dependencies(reverse = TRUE)
devtools::document()
?mvn
library(MVN)
?mvn
result = mvn(data = iris[-4], subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "quan",
showOutliers = TRUE, showNewData = TRUE)
#### Multivariate Normality Result
result$multivariateNormality
### Univariate Normality Result
result$univariateNormality
### Descriptives
result$Descriptives
### Multivariate Outliers
result$multivariateOutliers
### New data without multivariate outliers
result$newData
result = mvn(data = iris[-4], subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
result = mvn(data = iris[-4], subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
result = mvn(data = iris[-4], subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
library(MASS)
library(moments)
library(mvoutlier)
devtools::document()
library(MVN)
?mvn
getwd()
setwd("/Users/selcukkorkmaz/Documents/GitHub/")
system("R CMD build --compact-vignettes=gs+qpdf MVN")
system("R CMD check --as-cran MVN_5.3.tar.gz")
system("R CMD install MVN_5.3.tar.gz")
library(MVN)
?mvn
library(MVN)
data = read.table("~/Desktop/test.txt", header = T, sep = "\t")
head(data)
library(MVN)
mvn(data = data, mvnTest = "mardia")
data
cov = TRUE
tol = 1e-25
dataframe=as.data.frame(data)
dname <- deparse(substitute(data))
data <- data[complete.cases(data),]
data <- as.matrix(data)
n <- dim(data)[1]
p <- dim(data)[2]
data.org <- data
data <- scale(data, scale = FALSE)
if (cov) {
S <- ((n - 1)/n) * cov(data)
}
else {
S <- cov(data)
}
if (cov) {
S <- ((n - 1)/n) * cov(data)
}else {
S <- cov(data)
}
D <- data %*% solve(S, tol = tol) %*% t(data)
g1p <- sum(D^3)/n^2
g2p <- sum(diag((D^2)))/n
df <- p * (p + 1) * (p + 2)/6
k <- (p + 1) * (n + 1) * (n + 3)/(n * ((n + 1) * (p + 1) -
6))
n < 20
n
skew <-  n * g1p/6
p.skew <-  pchisq(skew, df, lower.tail = FALSE)
kurt <- (g2p - p * (p + 2)) * sqrt(n/(8 * p * (p + 2)))
p.kurt <-  2 * (1 - pnorm(abs(kurt)))
skewMVN = ifelse(p.skew > 0.05, "YES", "NO")
kurtoMVN = ifelse(p.kurt > 0.05, "YES", "NO")
MVN = ifelse(p.kurt > 0.05 && p.skew > 0.05, "YES", "NO")
result <- cbind.data.frame(test = "Mardia", g1p = g1p, chi.skew = skew, p.value.skew = p.skew, skewnewss = skewMVN,
g2p = g2p, z.kurtosis = kurt, p.value.kurt = p.kurt, kurtosis = kurtoMVN, MVN = MVN)
resultSkewness = cbind.data.frame(Test = "Mardia Skewness", Statistic = as.factor(skew), "p value" = as.factor(p.skew), Result = skewMVN)
resultKurtosis = cbind.data.frame(Test = "Mardia Kurtosis", Statistic = as.factor(kurt), "p value" = as.factor(p.kurt), Result = kurtoMVN)
MVNresult = cbind.data.frame(Test = "MVN", Statistic = NA,"p value" = NA, Result = MVN)
result = rbind.data.frame(resultSkewness, resultKurtosis, MVNresult)
result
skew <- n * k * g1p/6
skew
k
data = read.table("~/Desktop/test.txt", header = T, sep = "\t")
n <- nrow(data)
p <- ncol(data)
n
p
data <- scale(data, scale = FALSE)
data
?scale
k = ((p + 1)*(n + 1)*(n + 3))/(n*(n + 1)*(p + 1) - 6)
k
library(MVN)
k
