mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "log", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "energy", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "DH", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "box", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "scatter", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "scatter", multivariatePlot = "persp",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
head(data)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "scatter", multivariatePlot = "persp",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "persp",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
mvn(data, subset = NULL, mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
mvn(data, subset = NULL, mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2)]
data[1,1] = NA
mvn(data, subset = NULL, mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
library(MVN)
391*4.5
391*5.5
?ks.test
307.33-248.72
(95.42+45.58)/2
dim(comps4)
rm(list = ls())
library(ChemmineR)
setwd("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/")
aids = read.table("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/aid.txt", header = T, stringsAsFactors = FALSE)
aid = aids[1,1]
for(i in 22:52){
system(paste0('java -jar PaDEL-Descriptor.jar  -threads 4 -2d -3d  -fingerprints -file Result/',aid,'_',i,'.csv  -dir SDF/',aid,'_',i,'.sdf'))
}
library(dplyr)
data = read.csv(paste0("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/Result/",aid,"_1.csv"), header = T)
for(i in 2:52){
data2 = read.csv(paste0("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/Result/",aid,"_",i,'.csv'), header = T)
data = data
data <- rbind.data.frame(data,data2)
}
dim(data)
dim(comps4)
aids = read.table("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/aid.txt", header = T, stringsAsFactors = FALSE)
id = 1
print(paste0(id, "/", nrow(aids)))
aid = aids[id,1]
print(paste0("Step 1: Started to analyze ", aid))
path = paste0("CSV/",aid,"_datatable_all.csv")
comps = read.csv(path, header = T, stringsAsFactors = F)
dim(comps)
table(comps$PUBCHEM_ACTIVITY_OUTCOME)
comps2 = comps[,1:4]
head(comps2)
dim(comps2)
comps2 = comps2[complete.cases(comps2),]
dim(comps2)
table(comps2$PUBCHEM_ACTIVITY_OUTCOME)
head(comps2)
comps3 = comps2[,c("PUBCHEM_CID","PUBCHEM_ACTIVITY_OUTCOME")]
head(comps3)
dim(comps3)
table(comps3$PUBCHEM_ACTIVITY_OUTCOME)
dups = duplicated(comps3$PUBCHEM_CID)
comps4 = comps3[!dups,]
comps4 = comps4[complete.cases(comps4),]
head(comps4)
dim(comps4)
rownames(comps4) = comps4$PUBCHEM_CID
table(comps4$PUBCHEM_ACTIVITY_OUTCOME)
rownames(comps4)
data$Name
table((rownames(comps4) %in% data$Name))
table(as.numeric(rownames(comps4) %in% data$Name))
table(as.numeric(rownames(comps4)) %in% data$Name)
as.numeric(rownames(comps4))
comps5 = comps4[as.numeric((rownames(comps4)) %in% data$Name),]
dim(comps5)
colnames(comps5)[1] = "Name"
head(comps5)
comps5$PUBCHEM_ACTIVITY_OUTCOME[comps5$PUBCHEM_ACTIVITY_OUTCOME == "Active"] <- "1"
comps5$PUBCHEM_ACTIVITY_OUTCOME[comps5$PUBCHEM_ACTIVITY_OUTCOME == "Inactive"] <- "0"
comps5$PUBCHEM_ACTIVITY_OUTCOME[comps5$PUBCHEM_ACTIVITY_OUTCOME == "Inconclusive"] <- NA
table(comps5$PUBCHEM_ACTIVITY_OUTCOME)
table((rownames(comps5) %in% data$Name))
rownames(comps5)
comps5[1:5,1:5]
head(comps5)
comps5 = comps4[as.numeric((rownames(comps4)) %in% data$Name),]
dim(comps5)
colnames(comps5)[1] = "Name"
head(comps5)
head(comps4)
comps5 = comps4[(rownames(comps4) %in% data$Name),]
dim(comps5)
colnames(comps5)[1] = "Name"
head(comps5)
comps5 = comps4[(rownames(comps4) %in% data$Name),]
dim(comps5)
colnames(comps5)[1] = "Name"
head(comps5)
comps5$PUBCHEM_ACTIVITY_OUTCOME[comps5$PUBCHEM_ACTIVITY_OUTCOME == "Active"] <- "1"
comps5$PUBCHEM_ACTIVITY_OUTCOME[comps5$PUBCHEM_ACTIVITY_OUTCOME == "Inactive"] <- "0"
comps5$PUBCHEM_ACTIVITY_OUTCOME[comps5$PUBCHEM_ACTIVITY_OUTCOME == "Inconclusive"] <- NA
table(comps5$PUBCHEM_ACTIVITY_OUTCOME)
table(rownames(comps4) %in% data$Name)
table(rownames(comps5) %in% data$Name)
dataset = merge(data[,-1], comps5, by = "Name")
data[1:4,1:4]
dataset = merge(data, comps5, by = "Name")
dim(dataset)
dataset$PUBCHEM_ACTIVITY_OUTCOME = as.factor(dataset$PUBCHEM_ACTIVITY_OUTCOME)
dataset[1:4,1:4]
table(dataset$PUBCHEM_ACTIVITY_OUTCOME)
dataset2 = dataset[,-1]
dataset2[1:4,1:4]
nzv = caret::nearZeroVar(dataset2)
nzv
length(nzv)
dataset3 = dataset2[,-nzv]
dim(dataset3)
dataset3[1:4,1:4]
var(dataset3$nAcid)
dataset3[1:4,1:20]
head(nzv)
var(dataset2$naAromAtom)
var(dataset2$nAromBond)
var(dataset2$nAromBond)
var(dataset2$AMR)
var(dataset2$AMR, na.rm = T)
dataset3 = dataset2[complete.cases(dataset2),]
dim(dataset3)
dataset3 = dataset2[,colSums(is.na(dataset2))<nrow(dataset2)]
dim(dataset3)
dim(dataset2)
dataset4 = dataset3[complete.cases(dataset3),]
dim(dataset4)
dataset4 = dataset3[,colSums(is.na(dataset3))<nrow(dataset3)]
dim(dataset4)
dataset3[complete.cases(dataset3),]
apply(dataset3, 2, var)
dataset3 = dataset2[, colSums(is.na(dataset2)) != nrow(dataset2)]
dim(dataset3)
apply(dataset3, 2, var)
dataset4 = dataset3[complete.cases(dataset3),]
head(dataset4)
?caret::nearZeroVar
nzv = caret::nearZeroVar(dataset3, saveMetrics = T, names = T)
nzv
dataset4 = dataset3[,nzv$nzv]
dim(dataset4)
dataset4 = dataset3[,!(nzv$nzv)]
dim(dataset4)
dataset4[1:4,1:4]
dataset5 = dataset4[complete.cases(dataset4),]
dataset5
dataset5[1:4,1:4]
dim(dataset5)
table(dataset5$PUBCHEM_ACTIVITY_OUTCOME)
X = dataset5[,-"PUBCHEM_ACTIVITY_OUTCOME"]
X = dataset5[,-c("PUBCHEM_ACTIVITY_OUTCOME")]
which(colnames(dataset5) == "PUBCHEM_ACTIVITY_OUTCOME")
head(dataset5[,1297])
X = dataset5[,-which(colnames(dataset5) == "PUBCHEM_ACTIVITY_OUTCOME")]
dim(X)
Y = dataset5[,which(colnames(dataset5) == "PUBCHEM_ACTIVITY_OUTCOME")]
head(Y)
Y = dataset5[,which(colnames(dataset5) == "PUBCHEM_ACTIVITY_OUTCOME"), drop=F]
head(Y)
write.table(X, "/Users/selcukkorkmaz/Documents/Studies/DeepDrug/BayesianNN/data/df.txt", quote = F, row.names = F, sep = "\t")
write.table(Y, "/Users/selcukkorkmaz/Documents/Studies/DeepDrug/BayesianNN/data/class.txt", quote = F, row.names = F, sep = "\t")
table(Y)
rm(list = ls())
library(ChemmineR)
setwd("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/")
aids = read.table("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/aid.txt", header = T, stringsAsFactors = FALSE)
aids
for(id in 1:length(aids)){
print(paste0(id, "/", nrow(aids)))
aid = aids[id,1]
print(paste0("Step 1: Started to analyze ", aid))
path = paste0("CSV/",aid,"_datatable_all.csv")
comps = read.csv(path, header = T, stringsAsFactors = F)
dim(comps)
table(comps$PUBCHEM_ACTIVITY_OUTCOME)
comps2 = comps[,1:4]
head(comps2)
dim(comps2)
comps2 = comps2[complete.cases(comps2),]
dim(comps2)
table(comps2$PUBCHEM_ACTIVITY_OUTCOME)
head(comps2)
comps3 = comps2[,c("PUBCHEM_CID","PUBCHEM_ACTIVITY_OUTCOME")]
head(comps3)
dim(comps3)
table(comps3$PUBCHEM_ACTIVITY_OUTCOME)
dups = duplicated(comps3$PUBCHEM_CID)
comps4 = comps3[!dups,]
comps4 = comps4[complete.cases(comps4),]
head(comps4)
dim(comps4)
rownames(comps4) = comps4$PUBCHEM_CID
table(comps4$PUBCHEM_ACTIVITY_OUTCOME)
#10296
cids = unique(as.numeric(comps4$PUBCHEM_CID))
cids2 = data.frame(cids)
write.table(cids2, paste0("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/", aid,"cids.txt"), quote = F, row.names = F, sep = "\t")
}
aids
id=1
print(paste0(id, "/", nrow(aids)))
aid = aids[id,1]
aid
print(paste0("Step 1: Started to analyze ", aid))
path = paste0("CSV/",aid,"_datatable_all.csv")
comps = read.csv(path, header = T, stringsAsFactors = F)
dim(comps)
table(comps$PUBCHEM_ACTIVITY_OUTCOME)
sum(table(comps$PUBCHEM_ACTIVITY_OUTCOME))
comps2 = comps[,1:4]
head(comps2)
dim(comps2)
comps2 = comps2[complete.cases(comps2),]
dim(comps2)
table(comps2$PUBCHEM_ACTIVITY_OUTCOME)
head(comps2)
comps3 = comps2[,c("PUBCHEM_CID","PUBCHEM_ACTIVITY_OUTCOME")]
head(comps3)
dim(comps3)
table(comps3$PUBCHEM_ACTIVITY_OUTCOME)
dups = duplicated(comps3$PUBCHEM_CID)
comps4 = comps3[!dups,]
comps4 = comps4[complete.cases(comps4),]
head(comps4)
dim(comps4)
rownames(comps4) = comps4$PUBCHEM_CID
table(comps4$PUBCHEM_ACTIVITY_OUTCOME)
#10296
cids = unique(as.numeric(comps4$PUBCHEM_CID))
cids2 = data.frame(cids)
write.table(cids2, paste0("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/", aid,"cids.txt"), quote = F, row.names = F, sep = "\t")
for(id in 1:length(aids)){
print(paste0(id, "/", nrow(aids)))
aid = aids[id,1]
print(paste0("Step 1: Started to analyze ", aid))
path = paste0("CSV/",aid,"_datatable_all.csv")
comps = read.csv(path, header = T, stringsAsFactors = F)
dim(comps)
table(comps$PUBCHEM_ACTIVITY_OUTCOME)
comps2 = comps[,1:4]
head(comps2)
dim(comps2)
comps2 = comps2[complete.cases(comps2),]
dim(comps2)
table(comps2$PUBCHEM_ACTIVITY_OUTCOME)
head(comps2)
comps3 = comps2[,c("PUBCHEM_CID","PUBCHEM_ACTIVITY_OUTCOME")]
head(comps3)
dim(comps3)
table(comps3$PUBCHEM_ACTIVITY_OUTCOME)
dups = duplicated(comps3$PUBCHEM_CID)
comps4 = comps3[!dups,]
comps4 = comps4[complete.cases(comps4),]
head(comps4)
dim(comps4)
rownames(comps4) = comps4$PUBCHEM_CID
table(comps4$PUBCHEM_ACTIVITY_OUTCOME)
#10296
cids = unique(as.numeric(comps4$PUBCHEM_CID))
cids2 = data.frame(cids)
write.table(cids2, paste0("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/", aid,"cids.txt"), quote = F, row.names = F, sep = "\t")
}
length(aids)
for(id in 1:nrow(aids)){
print(paste0(id, "/", nrow(aids)))
aid = aids[id,1]
print(paste0("Step 1: Started to analyze ", aid))
path = paste0("CSV/",aid,"_datatable_all.csv")
comps = read.csv(path, header = T, stringsAsFactors = F)
dim(comps)
table(comps$PUBCHEM_ACTIVITY_OUTCOME)
comps2 = comps[,1:4]
head(comps2)
dim(comps2)
comps2 = comps2[complete.cases(comps2),]
dim(comps2)
table(comps2$PUBCHEM_ACTIVITY_OUTCOME)
head(comps2)
comps3 = comps2[,c("PUBCHEM_CID","PUBCHEM_ACTIVITY_OUTCOME")]
head(comps3)
dim(comps3)
table(comps3$PUBCHEM_ACTIVITY_OUTCOME)
dups = duplicated(comps3$PUBCHEM_CID)
comps4 = comps3[!dups,]
comps4 = comps4[complete.cases(comps4),]
head(comps4)
dim(comps4)
rownames(comps4) = comps4$PUBCHEM_CID
table(comps4$PUBCHEM_ACTIVITY_OUTCOME)
#10296
cids = unique(as.numeric(comps4$PUBCHEM_CID))
cids2 = data.frame(cids)
write.table(cids2, paste0("~/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/", aid,"cids.txt"), quote = F, row.names = F, sep = "\t")
}
nrow(aids)
paste0('java -jar PaDEL-Descriptor.jar  -threads 4 -2d -3d  -fingerprints -file Result/',aid,'_','.csv  -dir SDF/',aid,'_','.sdf')
paste0('java -jar PaDEL-Descriptor.jar  -threads 4 -2d -3d  -fingerprints -file Result/',aid,'.csv  -dir SDF/',aid,'.sdf')
system(paste0('java -jar PaDEL-Descriptor.jar  -threads 4 -2d -3d  -fingerprints -file Result/',aid,'.csv  -dir SDF/',aid,'.sdf'))
s = seq(0,334457,150 )
s
?seq
data.frame(s)
write.table(s, '/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/sequence.txt', quote = F, row.names = F)
cids
length(s = seq(0,334457,150 ))
length(cids)
s = c(seq(0,334457,150), 334457)
s
write.table(s, '/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/sequence.txt', quote = F, row.names = F)
seq
s
length(s)
s = c(seq(0,334457,120), 334457)
s
length(s)
write.table(s, '/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/sequence.txt', quote = F, row.names = F)
cid = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/AID_485341cids.txt", header = T)
nrow(cid)
s = c(seq(0,nrow(cid),120), nrow(cid))
head(s)
write.table(s, '/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/AID_485341cidssequence.txt', quote = F, row.names = F)
seq4[27]
seq[27]
s[27]
s[28]
cid = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/AID_504466cids.txt", header = T)
s = c(seq(0,nrow(cid),120), nrow(cid))
write.table(s, '/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/AID_504466cidssequence.txt', quote = F, row.names = F)
s[4]
s = c(seq(360,nrow(cid),120), nrow(cid))
s
head(s)
cid = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/AID_624202cids.txt", header = T)
s = c(seq(0,nrow(cid),120), nrow(cid))
write.table(s, '/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/AID_624202cids.txtsequence.txt', quote = F, row.names = F)
cid = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/AID_651820cids.txt", header = T)
s = c(seq(0,nrow(cid),120), nrow(cid))
write.table(s, '/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/AID_651820cidssequence.txt', quote = F, row.names = F)
cid = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/AID_485314cids.txt", header = T)
cid[54]
cid = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/cids/AID_485314cids.txt", header = T)
head(cid)
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_485314cidssequence.txt", header = T)
s[54]
s[1,54]
head(s)
s[54,1]
s[55,1]
seq4[11]
seq4[11,1]
seq[11,1]
s[11,1]
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_485314cidssequence.txt", header = T)
s[11,1]
s[30,1]
head(s,30)
seq[30,1]
seq4[30,1]
s[30,1]
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_485314cidssequence.txt", header = T)
s[79,1]
s[80,1]
seq = pd.read_csv("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_485341cidssequence.txt", delimiter="\t")
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_485314cidssequence.txt", header = T)
dim(s)
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_504466cidssequence.txt", header = T)
s[25,1]
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_485341cidssequence.txt", header = T)
s[31,1]
dim(s)
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/504466cidssequence.txt", header = T)
s = read.table("/Users/selcukkorkmaz/Documents/Studies/DeepDrug/PaDEL-Descriptor/seq/AID_504466cidssequence.txt", header = T)
s[25,1]
?mvn
?MVN::mvn
setosa = iris[1:50,1:4]
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "quan", showOutliers = TRUE)
library(MVN)
setosa = iris[1:50,1:4]
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "quan", showOutliers = TRUE)
setosa = iris[1:50,1:3]
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "quan", showOutliers = TRUE)
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "adj", showOutliers = TRUE)
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "adj", showOutliers = TRUE)
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "quan", showOutliers = TRUE)
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "adj", showOutliers = TRUE)
result$multivariateOutliers
library(MVN)
setosa = iris[1:50,1:3]
result = mvn(data = setosa, mvnTest = "hz", multivariateOutlierMethod = "adj", showOutliers = TRUE)
result$multivariateOutliers
