library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
result
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
data = data[complete.cases(data),]
powerTransformation = summary(powerTransform(data))$result
library(car)
data = data[complete.cases(data),]
data
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
result = BoxCox(data, type = bcType)
sData = split(data[,!(colnames(data) %in% subset)], data[,subset])
sData
sData2 = lapply(sData, complete.cases)
sData2
sData2 = sData[lapply(sData, complete.cases)]
sData2 = sData[lapply(sData, complete.cases),]
sData2 = lapply(sData, sData[[id]][comp,])
comp <- lapply(data_in, complete.cases)
sData2 = lapply(sData, sData[[id]][comp,])
clean_data <- list()
for (i in seq_along(id)) {
clean_data[[i]] <- data_in[[i]][complete.cases(data_in[[i]]), ]
}
comp <- lapply(data_in, complete.cases)
clean_data <- Map(function(d,c) {d[c,]}, data_in, comp)
comp <- lapply(sData, complete.cases)
clean_data <- Map(function(d,c) {d[c,]}, sData, comp)
clean_data <- lapply(sData, function(x) x[complete.cases(x),])
sData2 <- lapply(sData, function(x) x[complete.cases(x),])
sData2
sData = split(data[,!(colnames(data) %in% subset)], data[,subset])
comp <- lapply(sData, complete.cases)
clean_data <- Map(function(d,c) {d[c,]}, sData, comp)
sData <- lapply(sData, function(x) x[complete.cases(x),])
result = lapply(sData, BoxCox, type = bcType)
dataList = list()
bcList = list()
for(i in 1:length(result)){
dataList[[i]] = result[[i]][[1]]
bcList[[i]] = result[[i]][[2]]
}
data = cbind.data.frame(do.call(rbind.data.frame, dataList), data[subset])
cbind.data.frame
dataList
data[subset]
sData
head(data)
splitData = split(data[,!(colnames(data) %in% subset)], data[,subset][complete.cases(data[,subset])])
name = names(splitData)
if(transform == "log"){
tData = apply(data[!(colnames(data) %in% subset)],2,log)
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
if(transform == "sqrt"){
tData = apply(data[!(colnames(data) %in% subset)],2,sqrt)
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
if(transform == "square"){
tData = apply(data[!(colnames(data) %in% subset)],2,function(x){
return(x^2)
})
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
if (!(is.null(lapply(splitData, dim)[[1]]))){
if(mvnTest == "mardia"){
mvnResult = lapply(splitData, mardia, cov = covariance, tol = tol)
}
if(mvnTest == "hz"){
mvnResult = lapply(splitData, hz, cov = covariance, tol = tol)
}
if(mvnTest == "royston"){
mvnResult = lapply(splitData, royston, tol = tol)
}
if(mvnTest == "dh"){
mvnResult = lapply(splitData, dh)
}
if(mvnTest == "energy"){
mvnResult = lapply(splitData, energy, R = R)
}
}else{mvnResult = "No MVN result. Number of variables is less than 2 "}
if(univariateTest == "SW"){
uniResult = lapply(splitData, uniNorm, type = "SW")
}
if(univariateTest == "CVM"){
uniResult = lapply(splitData, uniNorm, type = "CVM")
}
if(univariateTest == "Lillie"){
uniResult = lapply(splitData, uniNorm, type = "Lillie")
}
if(univariateTest == "SF"){
uniResult = lapply(splitData, uniNorm, type = "SF")
}
if(univariateTest == "AD"){
uniResult = lapply(splitData, uniNorm, type = "AD")
}
if(desc){
descs = lapply(splitData, descriptives)
}else{descs = NULL}
if (multivariatePlot == "qq") {
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
n <- dim(subsetData)[1]
p <- dim(subsetData)[2]
if (covariance) {
S <- ((n - 1)/n) * cov(subsetData)
}else {
S <- cov(subsetData)
}
dif <- scale(subsetData, scale = FALSE)
d <- diag(dif %*% solve(S, tol = tol) %*% t(dif))
r <- rank(d)
chi2q <- qchisq((r - 0.5)/n, p)
plot(d, chi2q, pch = 19, main = paste0("Chi-Square Q-Q Plot for ", name[i]),
xlab = "Squared Mahalanobis Distance", ylab = "Chi-Square Quantile")
abline(0, 1, lwd = 2, col = "black")
}
}
if (multivariatePlot == "persp") {
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
mvnPlot(subsetData, type = "persp", default = TRUE,
plotCtrl = c(perspControl(), contourControl()), main = paste0("Perspective Plot for ", name[i]))
}
}
if (multivariatePlot == "contour") {
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
mvnPlot(subsetData, type = "contour", default = TRUE,
plotCtrl = c(perspControl(), contourControl()), main = paste0("Contour Plot for ", name[i]))
}
}
if(multivariateOutlierMethod != "none"){
mvOutliers = list()
newData = list()
if(multivariateOutlierMethod == "quan"){
main = paste0("Chi-Square Q-Q Plot for ", name[[i]])
}else{
main = paste0("Adjusted Chi-Square Q-Q Plot for ", name[[i]])
}
for(i in 1:length(name)){
subsetData = splitData[[i]][complete.cases(splitData[[i]]),]
mvOutlierRes = mvOutlier(subsetData, qqplot = TRUE, alpha = 0.5, tol = 1e-25, method = multivariateOutlierMethod, label = TRUE, position = NULL, offset = 0.5, main = main)
mvOutliers[[i]] = mvOutlierRes$outlier[mvOutlierRes$outlier$Outlier == "TRUE",]
newData[[i]] = mvOutlierRes$newData
}
names(mvOutliers) = name
names(newData) = name
}
if(univariatePlot != "none"){
lapply(splitData, uniPlot, type = univariatePlot)
}
library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
data[subset]
head(data)
head(data[subset][complete.cases(data),])
length(data[subset][complete.cases(data),])
library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
splitData = split(data[,!(colnames(data) %in% subset)], data[,subset][complete.cases(data)])
data
data[,subset]
splitData = split(data[,!(colnames(data) %in% subset)], data[,subset])
splitData
tData = apply(data[!(colnames(data) %in% subset)],2,log)
tData
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
splitData
library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
splitData
!(colnames(data) %in% subset)
subset
subset
subset
data[subset]
sData = split(data[,!(colnames(data) %in% subset)], data[,subset])
comp <- lapply(sData, complete.cases)
clean_data <- Map(function(d,c) {d[c,]}, sData, comp)
sData <- lapply(sData, function(x) x[complete.cases(x),])
result = lapply(sData, BoxCox, type = bcType)
dataList = list()
bcList = list()
for(i in 1:length(result)){
dataList[[i]] = result[[i]][[1]]
bcList[[i]] = result[[i]][[2]]
}
data = cbind.data.frame(do.call(rbind.data.frame, dataList), data[subset][complete.cases(data),])
BoxCoxPower = bcList
names(BoxCoxPower) = names(sData)
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
head(data)
names
colnames
dim(data)
varnames
colnms = colnames(data)
colnms
data = iris[-4]
data[1,1] = NA
colnms = colnames(data)
colnms
colnames(data) = colnms
library(MVN)
data = iris[-4]
data[1,1] = NA
result = mvn(data = data , subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE, bc = TRUE)
result
result = mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "log", R = 1000,
univariateTest = c"SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = TRUE, bcType = "rounded",
showOutliers = TRUE, showNewData = TRUE)
result = mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "log", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = TRUE, bcType = "rounded",
showOutliers = TRUE, showNewData = TRUE)
result = mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "log", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "rounded",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "log", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "rounded",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "none", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = TRUE, bcType = "rounded",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "none", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = TRUE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "sqrt", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
transform = "sqrt"
if(transform == "sqrt"){
data = apply(data,2,sqrt)
}
data
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
name = names(splitData)
if(transform == "log"){
tData = apply(data[!(colnames(data) %in% subset)],2,log)
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
if(transform == "sqrt"){
tData = apply(data[!(colnames(data) %in% subset)],2,sqrt)
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
head(data)
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
splitData
data = iris[-4]
data[1,1] = NA
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
name = names(splitData)
if(transform == "sqrt"){
tData = apply(data[!(colnames(data) %in% subset)],2,sqrt)
data = cbind.data.frame(tData, data[,subset])
colnames(data)[dim(data)[2]] = subset
}
data
splitData
data
splitData = split(data[,!(colnames(data) %in% subset)], data[subset])
name = names(splitData)
if (!(is.null(lapply(splitData, dim)[[1]]))){
if(mvnTest == "mardia"){
mvnResult = lapply(splitData, mardia, cov = covariance, tol = tol)
}
if(mvnTest == "hz"){
mvnResult = lapply(splitData, hz, cov = covariance, tol = tol)
}
if(mvnTest == "royston"){
mvnResult = lapply(splitData, royston, tol = tol)
}
if(mvnTest == "dh"){
mvnResult = lapply(splitData, dh)
}
if(mvnTest == "energy"){
mvnResult = lapply(splitData, energy, R = R)
}
}else{mvnResult = "No MVN result. Number of variables is less than 2 "}
mvnResult = lapply(splitData, energy, R = R)
mvnResult = lapply(splitData, royston, tol = tol)
library(MVN)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "sqrt", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "log", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "hz", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "energy", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "DH", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "adj", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[-4]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "qq", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "histogram", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "box", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "scatter", multivariatePlot = "qq",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "scatter", multivariatePlot = "persp",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
head(data)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "scatter", multivariatePlot = "persp",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "persp",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "quan", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
mvn(data, subset = "Species", mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
data[1,1] = NA
mvn(data, subset = NULL, mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2,5)]
mvn(data, subset = NULL, mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
data = iris[c(1:2)]
data[1,1] = NA
mvn(data, subset = NULL, mvnTest = "dh", covariance = TRUE, tol = 1e-25, alpha = 0.5,
scale = TRUE, desc = TRUE, transform = "square", R = 1000,
univariateTest = "SW",
univariatePlot = "none", multivariatePlot = "contour",
multivariateOutlierMethod = "none", bc = FALSE, bcType = "optimal",
showOutliers = TRUE, showNewData = TRUE)
library(MVN)
391*4.5
391*5.5
